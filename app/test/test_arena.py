import numpy as np
import time

def py_matmul4(a, b):
    ra, ca = a.shape
    rb, cb = b.shape
    assert ca == rb, f"{ca} != {rb}"
    
    return np.matmul(a, b)
def strToBin(m):
	return "".join(format(ord(c), 'b').zfill(8) for c in m)
def invModQ(d,q):
	for i in range(1,q):
		if (d*i)%q == 1:
			return i
	return None
class ConvPoly(object):
	def __init__(self, coef=[0], N=None):
		if N is None:
			self.N, self.coef = len(coef), coef
		else:
			self.N, self.coef = N, coef + [0]*(N-len(coef))
	def __repr__(self):
		return type(self).__name__ + str(self.coef)
	def __add__(self, other):
		if isinstance(other, type(self)) and (self.N == other.N):
			return ConvPoly(list(map(sum,list(zip(self.coef, other.coef)))))
		elif isinstance(other, int):
			return ConvPoly([self.coef[0]+other] + self.coef[1:])
		else:
			return NotImplemented
	def __radd__(self, other):
		return self + other
	def __eq__(self, other):
		if self.coef == other.coef:
			return True
		return False
	def __ne__(self, other):
		return not (self == other)
	def __neg__(self):
		return type(self)([-x for x in other.coef], other.q)
	def __sub__(self, other):
		return self + (-other)
	def __rsub__(self, other):
		return self - other
	def __mul__(self, other):
		if isinstance(other, type(self)) and self.N == other.N:
			coefs = []
			for k in range(self.N):
				s = 0
				for i in range(self.N):
					s += self.coef[i] * other.coef[(k-i)%self.N]
				coefs.append(s)
			return type(self)(coefs)
		elif isinstance(other, int):
			return type(self)([ other*c for c in self.coef ])
		else:
			return NotImplemented
	# def __mul__(self, other):
	# 	if isinstance(other, type(self)) and self.N == other.N:
	# 		coefs = []
	# 		for k in range(self.N):
	# 			s = 0
	# 			for i in range(self.N):
	# 				s += self.coef[i] * other.coef[(k-i)%self.N]
	# 			coefs.append(s)
	# 		return type(self)(coefs)
	# 	elif isinstance(other, int):
	# 		return type(self)([ other*c for c in self.coef ])
	# 	else:
	# 		return NotImplemented
	def __rmul__(self, other):
		return self*other

class PolyModQ(object):
	def __init__(self, coef=[0], q=3):
		coef = [x%q for x in coef]
		for index, val in enumerate(coef[::-1]):
			if val != 0:
				break
		self.coef, self.degree, self.q = coef[:len(coef)-index], len(self.coef)-1, q
	def __repr__(self):
		return type(self).__name__ + "(" + str(self.coef) + ", " + str(self.q) + ")"
	def __eq__(self, other):
		if self.degree == other.degree:
			for pair in zip(self.coef, other.coef):
				if pair[0] != pair[1]:
					return False
			return True
		return False
	def __ne__(self, other):
		return not (self == other)
	def __neg__(self):
		return type(self)([-x for x in self.coef], self.q)
	def __add__(self, other):
		if isinstance(other, type(self)) and self.q == other.q:
			if self.degree > other.degree:
				return type(self)(list(map(sum,list(zip(self.coef, other.coef + [0]*(self.degree-other.degree))))),self.q)
			elif self.degree < other.degree:
				return other + self
			else:
				return type(self)(list(map(sum,list(zip(self.coef, other.coef)))),self.q)
		elif isinstance(other, ConvPoly):
			return self + ConvModQ(other.coef, self.q, self.N)
		elif isinstance(other, int):
			return type(self)([self.coef[0]+other] + self.coef[1:],self.q)
		else:
			return NotImplemented
	def __radd__(self, other):
		return self + other
	def __sub__(self, other):
		if isinstance(other, type(self)) or isinstance(other, int):
			return self + (-other)
		else:
			return NotImplemented
	def __rsub__(self, other):
		return self - other
	def __mul__(self, other):
		if isinstance(other, type(self)) and self.q == other.q:
			coef = [0]*(self.degree+other.degree+1)
			for index1,c1 in enumerate(self.coef):
				for index2,c2 in enumerate(other.coef):
					coef[index1+index2] += c1*c2
			return type(self)(coef, self.q)
		elif isinstance(other, int):
			return type(self)([ other*c for c in self.coef], self.q)
		else:
			return NotImplemented
	def __rmul__(self, other):
		return self*other
	def centerLift(self):
		coefs = []
		for c in self.coef:
			if c>self.q/2.0:
				coefs.append(c-self.q)
			else:
				coefs.append(c)
		return ConvPoly(coefs)


class ConvModQ(PolyModQ):
	def __init__(self, coef, q=3, N=None):
		coef = [x%q for x in coef]
		if N is None:
			self.N, self.coef = len(coef), coef
		else:
			self.N, self.coef = N, coef + [0]*(N-len(coef))
		self.degree, self.q = len(self.coef)-1, q
	def __repr__(self):
		return type(self).__name__ + "(" + str(self.coef) + ", " + str(self.q) + ")"
	def __mul__(self, other):
		# start_time = time.time_ns()

		if isinstance(other, type(self)) and self.N == other.N:
			# coefs = []
			# for k in range(self.N):
			# 	other_coef_temp = [other.coef[(k-i)%self.N] for i in range (self.N)]
			# 	coefs.append(np.sum(np.multiply(self.coef,other_coef_temp)))

			# coefs = []
			# for k in range(self.N):
			# 	other_coef_temp = [other.coef[(k-i)%self.N] for i in range (self.N)]
			# 	coefs.append(sum(np.multiply(self.coef,other_coef_temp)))

			
			# coefs = []
			# for k in range(self.N):
			# 	other_coef_temp = [other.coef[(k-i)%self.N] for i in range (self.N)]
			# 	# start_time = time.time_ns()
			# 	coefs.append(sum([a*b for a,b in zip(self.coef,other_coef_temp)]))
			# 	print((time.time_ns() - start_time)/ (10 ** 9))
			
			# coefs = [sum([a*b for a,b in zip(self.coef,[other.coef[(k-i)%self.N] for i in range (self.N)])]) for k in range(self.N)]

			# coefs = []
			# for k in range(self.N):
			# 	# if k <100 :
			# 		# print((time.time_ns() - start_time)/ (10 ** 9))	
			# 	a = [self.coef[i] * other.coef[(k-i)%self.N] for i in range(self.N)]
			# 	s = sum(a)
			# 	coefs.append(s)
			
			
			coefs = []
			for k in range(self.N):
				# if k <100 :
					# print((time.time_ns() - start_time)/ (10 ** 9))	
				s = sum([self.coef[i] * other.coef[(k-i)%self.N] for i in range(self.N)])
				# for i in range(self.N):
				# 	s += self.coef[i] * other.coef[(k-i)%self.N]
				coefs.append(s)

			# start_time = time.time_ns()
			# coefs = []
			# for k in range(self.N):
			# 	# if k <100 :
			# 		# print((time.time_ns() - start_time)/ (10 ** 9))	
			# 	s = 0
			# 	for i in range(self.N):
			# 		s += self.coef[i] * other.coef[(k-i)%self.N]
			# 	coefs.append(s)

			# print((time.time_ns() - start_time)/ (10 ** 9))
			return type(self)(coefs, self.q, self.N)
		elif isinstance(other, ConvPoly):
			other = ConvModQ(other.coef, self.q, self.N)
			return self*other
		elif isinstance(other, int):
			# return type(self)(np.multiply(other,self.coef), self.q, self.N)
			return type(self)([ other*c for c in self.coef ], self.q, self.N)
		else:
			return NotImplemented
		
	def __div__(self, other):
		if isinstance(other, type(self)):
			return self*other.inverse()
		elif isinstance(other, int):
			otherinv = invModQ(other, self.q)
			if otherinv is None:
				raise Exception("{} not invertible mod {}".format(other, self.q))
			return self*otherinv
		else:
			return NotImplemented
	def modQ(self, q):
		return ConvModQ(self.coef, q, self.N)
	def inverse(self, N=None, debug=False):
		if self.q == 2048:
			self.q = 2
		FAIL, i = 100000, 0
		if N is None:
			N = self.N
		quotients = []
		# Extended Euclidean Algorithm
		# q = b*k + r
		q = PolyModQ([-1] + [0]*(N-1) + [1], self.q)
		k = PolyModQ([0], self.q)
		b = PolyModQ(self.coef, self.q)
		r = q
		# repeat below while r!=0 for gcd/inverse
		bdinv = invModQ(b.coef[-1], self.q)
		# print r.coef[r.degree], b.coef[-1]
		if bdinv is None:
			return None
		while r.degree >= b.degree and i<FAIL:
			rcoef = r.coef
			kp = PolyModQ([0]*(r.degree-b.degree) + [rcoef[r.degree]*bdinv], self.q)
			k = k + kp
			r = r - kp*b
			i += 1
		quotients.append(k)
		if debug:
			print("{} = {}*{} + {}".format(q,b,k,r))
		while r != PolyModQ() and i<FAIL:
			q = b
			b = r
			k = PolyModQ([0]*(N+1), self.q)
			r = q
			# print r.coef[r.degree], b.coef[-1]
			bdinv = invModQ(b.coef[-1], self.q)
			if bdinv is None:
				# print r,b
				return None
			while r.degree >= b.degree and r != PolyModQ() and i<FAIL:
				rcoef = r.coef
				kp = PolyModQ([0]*(r.degree-b.degree) + [rcoef[r.degree]*bdinv], self.q)
				k = k + kp
				r = r - kp*b
				i += 1
			quotients.append(k)
			i += 1
			if debug:
				print("{} = {}*{} + {}".format(q,b,k,r))
		if i >= FAIL:
			print("Failed to generate inverse in {} steps, stopping.".format(FAIL))
			return None
		x = [ PolyModQ([0],self.q), PolyModQ([1], self.q)]
		y = [ PolyModQ([1], self.q), PolyModQ([0],self.q)]
		for index,quot in enumerate(quotients):
			x.append(quot*x[index+1]+x[index])
			y.append(quot*y[index+1]+y[index])
		if self.q == 2:
			n = 2
			self.q = 2048
			tinv = ConvModQ(x[-2].coef, self.q, N)
			while n <= 2048:
				tinv = 2*tinv - self * tinv * tinv
				n *= 2
			return tinv
		tinv = ConvModQ(x[-2].coef, self.q, N)
		tinv = self.q*tinv - self*tinv*tinv
		return 2*tinv

        
p = 3
r = ConvModQ([0, 0, 0, 2047, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2047, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 2047, 0, 2047, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2047, 0, 0, 2047, 0, 2047, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2047, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2047, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 2047, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2047, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2047, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 2047, 0, 0, 0, 0, 0, 0, 0, 0, 2047, 0, 0, 0, 0, 2047, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2047, 0, 0, 0, 0, 0, 0, 0, 0, 2047, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2047, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2047, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2047, 0, 0, 2047, 0, 0, 0, 0, 0, 0, 2047, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 2047, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2047, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 2047, 0, 0, 0, 2047, 0, 0, 0, 0, 1, 0, 2047, 2047, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2047, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2047, 0, 0, 0, 0, 0, 0, 0, 2047, 0, 2047, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2047, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2047, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2047, 0, 0, 2047, 0, 0, 2047, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2047, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2047, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2047, 0, 0, 0, 0, 0, 0, 0, 2047, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2047, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2047, 0, 0, 0, 0, 2047, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2047, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2047, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2047, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2047, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2047, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2047, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2047, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2047, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2047, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2047, 0, 0, 0, 0, 0, 0, 0, 0, 2047, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2047, 0, 2047, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2047, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2047, 2047, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2047, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2047, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2047, 0, 0, 0, 0, 0, 0, 0, 0, 2047, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 2047, 0, 0, 2047, 0, 0, 2047, 2047, 1, 0, 0, 2047, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2047, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2047, 0, 0, 0, 0, 0, 0, 2047, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2047, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2047, 0, 0, 0, 0, 0, 2047, 0, 0, 0, 0, 0, 0, 2047, 0, 0, 0, 0, 0, 2047, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2047, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2047, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 2048)
h = ConvModQ([1343, 932, 299, 2020, 111, 1497, 480, 140, 1402, 1252, 1651, 1267, 1371, 1970, 1613, 1882, 1443, 164, 1336, 1400, 1920, 886, 409, 187, 1858, 751, 1454, 1065, 610, 849, 362, 658, 740, 1797, 1509, 441, 374, 1434, 1492, 979, 1642, 849, 1661, 1247, 853, 493, 434, 805, 792, 1491, 1692, 1011, 640, 1894, 671, 677, 563, 1137,
1516, 1615, 760, 605, 61, 1109, 1932, 1528, 347, 1785, 1070, 1840, 970, 361, 937, 1149, 1688, 1113, 1572, 1852, 1753, 1800, 390, 886, 217, 1841, 211, 785, 378, 904,
210, 1848, 1365, 142, 1171, 757, 1678, 756, 524, 449, 2015, 953, 1486, 15, 1897, 1897, 76, 425, 1921, 1252, 47, 999, 962, 1655, 1408, 375, 292, 959, 911, 35, 1184, 753, 474, 484, 145, 835, 1721, 749, 2032, 1528, 848, 15, 1229, 954, 1481, 1863, 499, 1398, 1499, 1904, 1185, 797, 1173, 310, 256, 1397, 1478, 1743, 1613, 775, 457, 274, 89, 1470, 1962, 1169, 267, 320, 574, 15, 917, 1398, 1250, 1576, 287, 1372, 1521, 24, 211, 1030, 1498, 819, 1777, 910, 1231, 431, 1105, 1824, 1698, 1061, 1719, 112, 1198, 92, 1820, 1156, 242, 1414, 2047, 39, 1212, 159, 982, 917, 1968, 650, 1517, 1738, 495, 907, 40, 1969, 106, 1791, 1884, 830, 1922, 1981, 1018, 1517, 451, 745,
420, 1286, 657, 1965, 1031, 1200, 988, 1528, 1476, 1543, 153, 1501, 261, 1862, 280, 1877, 1160, 1591, 1798, 1678, 372, 802, 849, 1925, 1375, 1757, 1812, 649, 114, 148, 834, 1551, 1886, 709, 611, 22, 1726, 341, 320, 162, 820, 1183, 1599, 1712, 266, 1002, 1735, 1869, 658, 60, 1341, 1746, 1852, 1387, 1392, 517, 690, 1669, 5, 1285,
1395, 1857, 666, 1909, 1539, 130, 890, 1594, 1337, 679, 898, 1432, 1665, 704, 1167, 1795, 1245, 1521, 943, 867, 705, 327, 1927, 1523, 490, 1352, 285, 1222, 1396, 484, 166, 241, 1212, 303, 1601, 276, 496, 1328, 701, 1131, 288, 568, 1446, 1710, 1347, 1479, 1971, 1308, 642, 535, 1036, 669, 843, 688, 237, 1547, 738, 1187, 2010, 1985, 482, 1603, 913, 1950, 333, 1070, 123, 457, 681, 1919, 19, 1563, 80, 461, 495, 1881, 1204, 2022, 400, 67, 383, 503, 1934, 1062, 147, 1635, 373, 379, 948, 1233, 137, 775, 827, 2044, 2017, 1745, 901, 964, 752, 1583, 644, 938, 1876, 1278, 1762, 411, 1644, 263, 986, 1245, 1880, 283, 1705, 262, 232, 297, 237, 655, 1212, 71, 1684, 538, 667, 732, 432, 573, 1512, 333, 992, 763, 1859, 967, 499, 1911, 1556, 442, 1334, 1965, 27, 1787, 1633, 173, 1866, 1358, 1492, 1590, 286, 1230, 2007, 538, 194, 1090, 1811, 1599, 497, 598, 96, 1161, 1827, 1485, 1142, 690, 1947, 956, 1065, 45, 2035, 1358, 1509, 1811, 979, 771, 574, 1571, 94, 1179, 1515, 136, 255, 1252, 873, 294,
1050, 283, 1608, 148, 1020, 1920, 1895, 1886, 1539, 1142, 1176, 670, 779, 327, 27, 644, 1608, 169, 1175, 310, 1566, 1854, 1894, 208, 1076, 722, 1169, 950, 610, 963,
489, 685, 80, 1436, 805, 991, 42, 1310, 304, 1254, 38, 1276, 988, 935, 1288, 1282, 615, 617, 175, 1822, 97, 1289, 1217, 1387, 657, 1661, 1691, 581, 121, 1230, 584, 1289, 1512, 195, 1621, 944, 1313, 1847, 923, 1168, 1085, 782, 436, 1408, 1805, 1216, 188, 686, 1005, 196, 1833, 1450, 1179, 1698, 1809, 1511, 997, 1684, 1097, 113, 205, 1792, 1300, 732, 603, 1416, 37, 1298, 1260, 1644, 1138, 1086, 815, 404, 1872, 622, 1758, 1531, 124, 1650, 912, 976, 59, 1270, 1017, 596, 1981, 1384, 299, 1222, 516, 1617, 929, 919, 603, 37, 694, 1041, 1340, 165, 1333, 1527, 568, 1901, 847, 507, 791, 221, 1009, 1985, 1821, 867, 1612, 1577, 1298, 1735, 1656, 1507, 1884, 663, 414, 316, 1642, 1077, 1109, 872, 1129, 324, 150, 1495, 1087, 813, 266, 828, 296, 124, 588, 1473, 61, 862, 1455, 229, 29, 6, 1225, 91, 39, 1730, 1001, 112, 970, 663, 521, 1536, 1705, 149, 1041, 872, 1446, 1801, 1961, 417, 1825, 1471, 667, 1087, 756, 1837, 1426, 536, 173, 1600, 1544, 1370, 1591, 1466, 1895, 959, 1328, 1535, 1976, 49, 1674, 1522, 916, 1188, 848, 171, 1945, 1616, 1964, 1143, 1476, 1402, 1340, 1797, 1481, 1586, 970, 1566, 1143, 1942, 588, 809, 1818, 1624, 1991, 580, 509, 435, 1870, 176, 1475, 656, 1299, 124, 194, 1412, 355, 1212, 923, 817, 682, 836, 565, 78, 326, 843, 680, 1151, 995, 1441, 1700, 122, 912, 498, 1810, 1889, 1150, 292, 1880, 786, 864, 374, 1258, 279, 642, 1925, 866, 1184, 1449, 963, 1538, 680, 1303, 884, 417, 343, 982, 1734, 236, 1553, 1154, 852, 1815, 1532, 1114, 1443, 439, 1883, 1265, 1233, 1243, 54, 44, 201, 333, 1005, 1551, 1674, 470, 1866, 908, 1169, 400, 932, 1338, 1483, 179, 1166, 962, 965, 1409, 1440, 1784, 493, 535, 983, 276, 1830, 1104, 1546, 1185, 461, 1756, 95, 146, 1748, 1842, 1162, 293, 1001, 1376, 1705, 353, 773, 305, 943, 666, 1861, 842, 868, 184, 1143, 458, 431, 1273, 656, 84, 729, 1788, 1000, 938, 1758, 992, 1522, 505, 5, 1571, 1431, 262, 1327, 811, 377, 282, 898, 1033, 1664, 1277, 1906, 1475, 1012, 1089, 1417, 405, 506, 551, 799, 831, 733, 685, 1944, 1759,
653, 211, 724, 503, 1607, 722, 1970, 252, 432, 1549, 1915, 917, 1051, 1141, 938, 324, 267, 1624, 1077, 762, 910, 1894, 1150, 813, 1122, 963, 761, 1028, 393, 1038, 2044, 908, 691, 1193, 1225, 282, 1992, 1889, 1999, 963, 1957, 106, 909, 72, 723, 1317, 849, 813, 858, 7, 377, 890, 1679, 773, 616, 882, 1742, 864, 1805, 413, 1552, 1386, 552, 1661, 647, 250, 1742, 38, 689, 146, 332, 1720, 659, 1657, 582, 1187, 1270, 68, 1799, 1683, 135, 1104, 1018, 277, 816, 1573, 1224, 1520, 625, 832, 1070, 1358, 270, 1647, 1654, 977, 1018, 1917, 470, 1376, 1531, 1523, 196, 1960, 1899, 81, 1213, 631, 1794, 2014, 660, 204, 892, 1560, 351, 249, 1833, 233, 211, 683, 705, 1790,
861, 454, 914, 407, 1680, 1477, 690, 1508, 1496, 1667, 678, 1785, 817, 720, 1889, 596, 768, 508, 1140, 1891, 1917, 159, 1124, 95, 1514, 1342, 1191, 1668, 73, 663, 1573, 1341, 823, 1847, 1818, 12, 1820, 867, 788, 1314, 2010, 650, 1701, 1624, 649, 509, 541, 516, 23, 652, 996, 8, 531, 1240, 1177, 1418, 304, 852, 1168, 321, 1738, 1626, 1628, 1600, 1953, 731, 1365, 1828, 969, 185, 61, 1618, 914, 2041, 1518, 1081, 98, 1377, 1803, 1448, 655, 1275, 1456, 1352, 132, 1428, 1044, 921, 25, 1494, 1479,
1565, 1322, 1291, 1705, 1130, 1698, 1038, 1890, 142, 797, 420, 66, 76, 1255, 1073, 1733, 754, 568, 177, 1833, 315, 1360, 877, 2018, 1478, 1613, 2045, 1441, 1888, 1013, 1411, 1353, 1215, 460, 1730, 466, 1097, 1374, 1743, 1632, 175, 38, 1179, 1249, 59, 355, 1694, 1653, 1834, 1140, 1011, 814, 479, 978, 139, 1024, 1146, 1336, 840, 416, 1271, 500, 547, 1635, 88, 1124, 158, 562, 1814, 2020, 1280, 596, 1999, 1369, 1712, 1610, 549, 413, 2014, 1964, 933, 1308, 131, 881, 431, 766, 604, 939, 1503, 1853, 943, 187, 106, 1866, 890, 1945, 1787, 1476, 1507, 1711, 1274, 35, 1811, 1279, 579, 901, 2007, 524, 862, 542, 1103, 546, 1127, 708, 331, 957, 1373, 756, 265, 1623, 1402, 1217, 1622, 180, 323, 1120, 1444, 814, 221, 1437, 681, 1347, 1358, 673, 333, 303, 931, 614, 1503, 744, 40, 992, 47, 260, 275, 1146, 290, 1415, 1072, 503, 1384, 1130, 9, 1564, 940, 1334, 1332, 581, 812, 2033, 636, 1373, 273, 982, 981, 1945, 588, 1020, 1582, 1987, 149, 1791, 804, 736, 974, 1038, 1100, 457, 1952, 597, 1060,
279, 1543, 1870, 1436, 1438, 38, 1125, 1327, 101, 1325, 1883, 254, 1523, 444, 1579, 862, 1311, 1206, 1426, 1818, 1797, 1927, 1510, 588, 1295, 1233, 1745, 1520, 671,
99, 1639, 1687, 882, 250, 2017, 60, 170, 403, 1227, 912, 1675, 1538, 472, 1111, 1010, 1294, 1636, 1104, 1435, 7, 769, 883, 1289, 359, 1618, 1349, 1207, 1214, 476, 2046, 239, 1567, 1940, 1517, 1194, 1213, 841, 1343, 1502, 706, 1018, 1482, 886, 1007, 885, 1334, 210, 793, 883, 1717, 1930, 458, 1213, 412, 1715, 1032, 1954, 1576, 636, 743, 237, 454, 238, 1059, 1454, 614, 18, 293, 1005, 1190, 841, 1229, 1543, 977, 1464, 328, 1079, 116, 129, 1463, 2046, 771, 851, 1332, 941, 1429, 27, 950, 1658, 1707, 337, 1399, 920, 892, 968, 1960, 1690, 39, 926, 1616, 544, 787, 669, 136, 760, 1722, 503, 1590, 582, 1999, 1087, 128, 1010, 1570, 1667, 323, 542, 1297, 575, 665,
1476, 45, 1550, 1952, 606, 1404, 460, 1721, 473, 1114, 1039, 889, 816, 567, 1190, 725, 815, 508, 997, 1807, 518, 1386, 857, 1881, 1411, 710, 12, 887, 467, 444, 1485, 195, 978, 1780, 1208, 712, 749, 664, 251, 654, 320, 1483, 1343, 1846, 207, 1917, 1983, 1895, 1285, 254, 1964, 1489, 509, 1138, 304, 947, 1947, 1551, 684, 176, 84, 851, 1639, 933, 1029, 1043, 748, 790, 1866, 1620, 968, 1520, 1607, 1285, 1798, 2017, 1363, 1001, 1346, 1015, 693, 1514, 1749, 822, 1187, 893, 420, 70, 1635, 452, 1480, 418, 1351, 1514, 1976, 900, 1429, 233, 379, 159, 511, 131, 316, 1865, 364, 1440, 873, 1643, 961, 1144], 2048)
m = ConvPoly([0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0,
0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1,
0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1,
1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0,
1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1,
0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0,
1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0,
0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0,
0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0,
0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1,
0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1,
1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0,
1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1,
0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0,
1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
result = ConvModQ([932, 1937, 1789, 1175, 1065, 110, 998, 494, 423, 1303, 184, 1493, 1408, 1506, 1129, 862, 156, 96, 744, 599, 2047, 1979, 1650, 395, 1801, 192, 1729, 385, 277, 1412, 132, 295, 1390, 1125, 518, 989, 150, 126, 151, 965, 1950, 191, 1333, 878, 1225, 1214, 1444, 1587, 1948, 1415, 1225, 1152,
1303, 1257, 331, 59, 1601, 905, 1335, 1362, 1207, 1130, 920, 1957, 807, 448, 850, 1033, 871, 1247, 509, 741, 868, 755, 1244, 681, 2033, 1605, 372, 1256, 1537, 467, 993, 1666, 1460, 1779, 732, 920, 247, 477, 2034, 1634, 692, 144, 90, 84, 1397, 625, 1225, 1492, 1081, 1451, 1618, 162, 876, 1104, 664, 1640, 1375, 1309, 170, 1247, 1723, 114, 1297, 1518, 586, 1870, 1851, 1730, 1995, 333, 994, 1706, 482, 1899, 1996, 225, 684, 526, 527, 1963, 1282, 43, 1646, 628, 499, 162, 624, 1631, 1025, 1848, 1738, 1955, 343, 1440, 1830, 2043, 1318, 1756, 559, 2011, 1405, 1226, 678, 1061, 1948, 874, 168, 97, 588, 638, 321, 1390, 1793, 1995, 1901, 1657, 930, 1675, 607, 147, 1241, 364, 887, 40, 611, 1380, 1246, 895, 1606, 1095, 536, 275, 662, 987, 848, 813, 34, 1200, 1146, 1920, 515, 794, 1540, 960, 592, 2023, 1754, 847, 951, 409, 654, 1618, 1428, 511, 860, 58, 1388, 464, 262, 1319, 1550, 90, 1074,
93, 1780, 435, 1417, 1020, 1362, 413, 1710, 595, 643, 192, 1773, 605, 740, 962, 1863, 1170, 1919, 151, 93, 615, 557, 472, 2036, 208, 673, 1568, 1952, 832, 2021, 835, 1577, 354, 837, 856, 1104, 57, 564, 1016, 131, 1726, 270, 468, 1926, 1093, 938, 845, 1818, 83, 1130, 687, 1585, 379, 274, 149, 1625, 434, 374, 1545, 881, 1138, 1441, 985, 1788, 1874, 575, 439, 581, 880, 660, 689, 263, 1561, 976, 176, 1384, 1873, 1743, 249, 2038, 299, 247, 1446, 781, 212, 1627, 490, 1456, 1895, 1347, 1830, 382, 1383, 1647, 1181, 1821, 1879, 1069, 1270, 1885, 1685, 738, 384, 1464, 1273, 1220, 1173, 935, 977, 121, 1438, 246, 2024, 1933, 349, 1818, 854, 457, 1473, 831, 1358, 1202, 1912, 315, 1996, 1318, 1896, 677, 1017, 955, 1842, 1341, 297, 1664, 1881, 633, 1069, 620, 1292, 283, 69, 138, 528, 616, 1625, 109, 413, 1763, 1391, 1503, 385, 674, 1684, 1600, 729, 958, 1133, 1598, 1127, 304, 779, 1480, 628, 318, 916, 1987, 677, 298, 291, 474, 545, 1024, 989, 30, 1834, 289, 1394, 923, 1831, 1591, 1704, 1899, 441, 682, 321, 590, 1173, 2047, 274, 456, 1189, 71, 75, 1525, 1556, 1600, 1441, 1060, 1706, 1930, 1973, 1408, 1804, 1293, 186, 672, 538, 295, 305, 1778, 1275, 2045, 1782, 1517, 1804, 1186, 1662, 360, 1106, 1984, 1691, 380, 1688, 1650, 845, 1907, 1091, 496, 675, 1299, 1740, 1470, 1282, 277, 1489, 1662, 418, 1174, 1428, 79, 162, 427, 1421,
722, 282, 335, 267, 849, 919, 1334, 1501, 1088, 401, 1648, 800, 1249, 1758, 1725, 631, 885, 1553, 1454, 113, 171, 964, 542, 715, 560, 671, 1948, 769, 1596, 718, 296, 927, 1890, 1307, 840, 2027, 1751, 1813, 419, 1877, 616, 1602, 1767, 1895, 924, 439, 201, 481, 127, 1053, 1555, 1224, 1294, 45, 1252, 72, 422, 642, 1407, 995, 1838, 481, 1508, 676, 1148, 362, 1688, 1104, 627, 1536, 2044, 1060, 2029, 924, 1797, 640, 305, 609, 1399, 174, 15, 33, 1148, 1436, 621, 120, 1821, 1350, 549, 514, 1794, 1166, 1395, 119, 1207, 549, 470, 386, 1244, 627, 238, 1079, 1213, 663, 750, 1702, 1766, 30, 1222, 903, 1364, 819, 1369, 364, 854, 803, 530, 1623, 1755, 1828, 1220, 1685, 1435, 1310, 232, 1997, 1933, 1097, 1917, 1047, 1700, 325, 1869, 2015, 390, 1419, 933, 2047, 252, 1438, 1946, 725, 256, 1278, 10, 746, 790, 1870, 457, 1364, 1176, 1064, 1269, 1519, 1436, 1753, 1176, 145, 1984, 231, 1221, 1972, 1920, 1338, 1375, 1377, 531, 848, 1329, 707, 741, 1697, 1147, 933, 55, 1057, 1758, 928, 1402, 1395, 1798, 1172, 365, 1373, 1743, 1919, 458, 1114, 921, 406, 685, 540, 525, 1323, 1395, 587, 1084, 1012, 494, 886, 890, 288, 1282, 483, 127, 718, 1873, 243, 1644, 1421, 1922, 114, 1531, 7, 1849, 588,
1474, 1754, 1654, 1051, 1420, 339, 198, 1465, 1215, 1749, 1779, 1250, 1344, 1678, 1006, 1337, 670, 565, 1463, 351, 854, 1497, 721, 572, 1698, 803, 1878, 1373, 154, 800, 399, 1488, 719, 105, 815, 429, 1132, 728, 1549, 1698, 1774, 1355, 1173, 1105, 1702, 2014, 1030, 336, 849, 769, 1177, 1914, 222, 922, 762, 144, 1235, 1809, 1363, 1054, 1597, 1765, 1527, 1715, 272, 1795, 170, 12, 1392, 1494, 1718, 655, 291, 1226, 1960, 791, 478, 1797, 1561, 1705, 1495, 1021, 121, 1393, 2029, 471, 1603, 447, 1740, 1374, 69, 1990, 1196, 1291, 1992, 1488, 1564, 1599, 1940, 57, 1570, 983, 694, 1069, 12, 215,
1058, 655, 1500, 876, 1989, 1509, 33, 124, 1491, 1863, 1890, 1542, 1526, 1397, 1200, 832, 1638, 382, 1611, 1634, 1743, 655, 1078, 837, 701, 1903, 570, 1647, 957, 197, 311, 872, 180, 1672, 915, 534, 1047, 295, 2030, 103, 1015, 333, 1402, 345, 1122, 1507, 922, 441, 323, 948, 1052, 490, 1721, 1734, 1986, 317, 645, 992, 1552, 179, 779, 992, 2027, 1115, 1663, 153, 236, 1407, 255, 1725, 308, 346, 1698, 1026, 321, 1480, 747, 323, 803, 1431, 1644,
1440, 1990, 402, 790, 722, 214, 598, 1721, 624, 509, 1860, 265, 1437, 34, 1259, 70, 82, 1255, 1420, 979, 2013, 1411, 2002, 892, 824, 1265, 1453, 80, 242, 297, 1184, 469, 1690, 1910, 1424, 1756, 200, 1522, 1095, 1318, 472, 1164, 1450, 1271, 464, 355, 2011, 838, 967, 1489, 1555, 154, 1325, 1002, 1214, 1985, 354, 744, 431, 101, 428, 1006, 1397, 1817, 559, 679, 1512, 1849, 913, 1008, 1496, 585, 1828, 657, 256, 1540, 1533, 1396, 1617, 938, 1188, 1524, 1577, 1680, 315, 1239, 1249, 1614, 415, 1953, 1187, 776, 148, 987, 1381, 186, 1830, 1499, 650, 1744, 1715, 1438, 1216, 1133, 1897, 541, 239,
2025, 1379, 1931, 927, 5, 954, 1059, 652, 1740, 225, 99, 619, 883, 1690, 1831, 55, 1886, 1154, 1008, 905, 1387, 10, 500, 1004, 1962, 296, 579, 26, 487, 1589, 1774, 2041, 818, 656, 1075, 1036, 1168, 626, 1834, 1873, 705, 430, 1592, 819, 1434, 1681, 740, 1308, 1526, 340, 558, 205, 892, 148, 928, 311, 1470, 589, 1505, 153, 271, 178, 1131, 1991, 486, 1194, 223, 384, 1958, 1807, 930, 486, 1937, 10, 1454, 127, 1260, 324, 167, 1813, 1467, 1388, 676, 1235, 227, 1897, 1609, 785, 1270, 985, 714, 1362, 964, 1652, 1290, 1586, 450, 1244, 1593, 1286, 80, 2009, 148, 1622, 771, 142, 748, 1304, 1616, 1515, 1701, 1911, 702, 498, 932, 432, 1735, 2041, 312, 729, 1459, 914, 1353, 326, 1347, 45, 1970, 1393, 1704, 937, 436, 611, 2018, 1485, 1130, 1753,
795, 231, 1350, 368, 8, 1375, 1574, 961, 60, 515, 313, 53, 464, 962, 1961, 897, 212, 1648, 591, 148, 1408, 1591, 1377, 823, 907, 1802, 1081, 1318, 76, 1574, 1284, 959, 76, 1681, 474, 1278, 1167, 2028, 1801, 1504, 157, 1682, 337, 869, 1701, 836, 1593, 735, 476, 1381, 280, 998, 862, 764, 1025, 684, 971, 229, 1622, 423, 490, 1909, 2012, 1085, 1357, 490, 27, 1687, 1845, 1827, 1384, 15, 1868, 571, 1240, 826, 1703, 1431, 1165, 553, 294, 927, 676, 1222, 766, 944, 190, 1111, 1323, 227, 589, 67, 18, 1897, 1272, 1336, 1636, 599, 1973, 1277, 1507, 943, 901, 875, 533, 1556, 1406, 92, 1749, 1845, 914, 1210, 1263, 1188, 1860, 326, 1467, 1501, 189, 781, 704, 585, 1825, 1523, 1210, 338, 125, 1339, 236, 1335, 996, 405, 795, 1306, 934, 117, 399, 972, 426, 8, 623, 1222, 1394, 1294, 1429, 28, 790, 1113, 1710, 905, 1348, 1683, 2045, 307, 1917, 983, 1933, 1185, 158, 847, 1759, 1293, 647, 1262, 370, 487, 1211, 1878, 1851, 701, 857, 966, 753, 1074, 771, 908, 188, 147, 1824, 1875, 1078, 1267, 529, 911, 1361, 1922, 2038, 1300, 724, 668, 1457, 857, 1941, 1908, 621, 1324, 219, 830, 1616, 764, 1729, 1649, 1680, 1646, 136, 1383, 59, 1392, 433, 1498, 559, 1563, 956, 1949, 212, 935, 969, 1327, 1351, 1112, 1665, 1028, 1676, 436, 1160, 1406, 1934, 1611, 831, 1675, 615, 730, 813, 28, 873, 461, 1317, 923, 1750, 1312, 2031, 1001, 778, 297, 1458, 376, 55, 1415, 289, 1143, 2018, 1091, 1991, 352, 1045, 856, 167, 704, 872, 1786, 1902, 743, 64, 1480, 1909, 1848, 1516, 643, 182, 163, 1645, 1558, 305, 833, 1963, 833, 629, 43, 339, 98, 1800, 2037, 1498, 1419, 1529, 25, 1950, 1253, 558, 0, 1135, 435, 1320, 585, 1369, 1335, 61, 1467, 1874, 461, 642, 74, 1952, 1270, 1363, 616, 261, 1799, 1261, 1314, 99, 1059, 607, 289, 1976, 281, 443, 495, 104, 1023, 791, 1657, 1285, 234, 320, 94, 390, 470, 153, 1629, 1365, 596, 1499, 1504, 1750, 831, 1556, 214, 296, 215, 1699, 1754, 1064, 979, 1300, 28, 123, 412, 1240, 1652, 1840, 1301, 1015, 215, 1168,
292, 921, 1659, 1904, 33, 454, 372, 1010, 78, 177, 1685, 1589, 889, 1998, 1773, 388, 1740, 302, 424, 1916, 1603, 1127, 1888, 1103, 1231, 1630, 1664, 412, 1741, 943, 70, 794, 1381, 297, 1994, 246, 915, 1692, 1537, 1659], 2048)


# print(p*r)
start_time = time.time_ns()
temp1 = p*r
# print(temp1)
# print(h)
test = temp1*h*m
print((time.time_ns() - start_time)/ (10 ** 9))
print(test == result)

# start_time = time.time_ns()
# print((time.time_ns() - start_time)/ (10 ** 9))